<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cursor_sprite = spr_cursor; //this just makes a pen the cursor sprite to be cool.
filename = "Hat.png"; //create a file name for all your loading so, if you change a name, 
//you don't have to look in the code for all the places it is written. See the couple lines under this comment for some context.
globalvar spr_hat; //initialize a resource variable! This variable will act just as if you created
//a sprite in Game Maker.
spr_hat = sprite_add(filename, 1, false, false, sprite_width / 2, sprite_height / 2); //load the 
//resource. Read in the help for what these arguments mean.
custom = surface_create(sprite_width, sprite_height); //create a player-size surface.
surface_set_target(custom); //prepare to draw on the surface
draw_sprite(spr_hat, 0, sprite_width / 2, sprite_width / 2); //draw the loaded sprite on the surface.
surface_reset_target(); //reset the surface.
pen = 0; //pen 0 is pen, pen 1 is eraser.
pencolor = c_black; //the color for your pen.
penalpha = 1; //the alpha for your pen.
spd = 0; //the horizontal speed for the player. This is solely for the platformer example game.
saved = false; //this variable indicates whether you have saved your masterpiece of a hat.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_free(x + spd, y)) //gravity stuff here, look it up if you want a tutorial. They 
//are plentiful!
    x += spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == room0) //if you're in the sprite-making room
{
    if (keyboard_check_pressed(vk_enter)) // if you press enter
    {
        pencolor = get_color(pencolor); //get your pen color
        penalpha = real(get_string("Alpha Value", string(penalpha))); //get your pen alpha, 
        //NEVER use Game Maker's get_string, get_integer, or show_message in a real game. It 
        //annoys people like crazy. I'm using get_string and converting it so that decimals 
        //can be used.
    }
    
    if (keyboard_check_pressed(ord("1"))) //if you press 1
        pen = 0; //select the pen
    if (keyboard_check_pressed(ord("2"))) //if you press 2
        pen = 1; //select the eraser
    
    surface_set_target(custom); //prepare to draw to the custom surface
    if (mouse_check_button(mb_left)) //if you are holding left mouse down
    {
        draw_set_color(pencolor); //set the color
        draw_set_alpha(penalpha); //set the alpha
        switch (pen) //figure out which pen you're selecting
        {
            case 0:
                //draw a point at your mouse offset by player's x value plus his origin.
                //This is so it places the point in the right area, because you have to draw
                //on surfaces based on the top-left corner of the screen. If you don't understand,
                //see if the help can help you! Hehehe...
                draw_point(mouse_x - x + sprite_width / 2, mouse_y - y + sprite_width / 2); 
                break;
            case 1:
                draw_set_blend_mode(bm_subtract); //make a subtraction
                //do the same as above but with an eraser
                draw_point(mouse_x - x + sprite_width / 2, mouse_y - y + sprite_width / 2); 
                draw_set_blend_mode(bm_normal); //set to normal
                break;
        }
        draw_set_color(c_black); //reset the color
        draw_set_alpha(1); //reset the alpha
        saved = false; //set saved to false so that the computer knows he has changed since 
        //his last save.
    }
    surface_reset_target(); //set the drawing target back to the normal screen
    
    if (keyboard_check(vk_control) &amp;&amp; keyboard_check(ord("S"))) // if ctrl+s are pressed
    {
        surface_save(custom, filename); //save the surface to the file name
        //load the file
        spr_hat = sprite_add(filename, 1, false, false, sprite_width / 2, sprite_height / 2);
        saved = true; //set saved to true so that the game knows no changes have been made.
    }
    if (keyboard_check(vk_right)) //if you press the right arrow
    {
        if (!saved) //if you haven't saved changes
            //see if you want to save
            checkdiscard = show_question("Do you want to continue, discarding changes?");
        else checkdiscard = true; //if you have saved, set checkdiscard to true so you can 
            //continue the game
        if (checkdiscard) //if you want to discard (or you already saved)
            room_goto_next(); //go to the next room
    }
}
if (room == room1) //if you're in the playing room
{
    image_xscale = 1 / 4; //make the octopus normal-sized. I scaled him up so you could see
    //him in the draw room. You could alternatively change the room scale, but that makes 
    //everything blurry, and I don't like that too much.
    image_yscale = 1 / 4; //same
    if (place_free(x, y + 1)) //gravity stuff from here on down, look it up if you want a tutorial
        gravity = .125;
    else 
    {
        spd *= .95;
        gravity = 0;
    }
    gravity_direction = 270;
    if (vspeed &gt; 1)
        vspeed = 1;
    spd = clamp(spd, -4, 4);
    if (keyboard_check(ord("A")))
        if (place_free(x - /*ceil(spd * 2) - 1*/spd, y))
            spd -= .1;
        else spd = 0;
    if (keyboard_check(ord("D")))
        if (place_free(x + /*ceil(spd * 2) + 1*/spd, y))
            spd += .1;
        else spd = 0;
    if (keyboard_check_pressed(ord("W")))
        vspeed = -3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == room1)
{
    move_contact_solid(direction, 12); //gravity stuff here, look it up if you want a tutorial
    if (place_meeting(x, y + 1, obj_block) || place_meeting(x, y - 1, obj_block))
        vspeed = 0;
    if (place_meeting(x + spd, y, obj_block))
        spd = 0;
    if (place_meeting(x - spd, y, obj_block))
        spd = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == room0) //draw stuff in the first room
{
    draw_self(); //draw yourself
    draw_surface(custom, x - sprite_width / 2, y - sprite_height / 2); //draw the surface offset by your origin
    draw_set_color(pencolor);
    draw_set_alpha(penalpha);
    draw_point(mouse_x, mouse_y); //make a dot of your mouse color and alpha at your mouse position (as the tip of the pen in this example)
    draw_set_color(c_black);
    draw_set_alpha(1);
}
else //draw stuff in the second room
{
    draw_self();
    draw_sprite_ext(spr_hat, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
